/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/yB4rXX8KWsD
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Arimo } from 'next/font/google'

arimo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuRadioGroup, DropdownMenuRadioItem } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { Dialog, DialogTrigger, DialogContent } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input"

export function AdminDash() {
  const [orders, setOrders] = useState([
    {
      id: "ORD001",
      reviews: 5,
      link: "https://www.google.com/maps/place/Acme+Inc/@37.7749,-122.4194,17z/data=!3m1!4b1!4m5!3m4!1s0x80858a6d4e2d30c3:0x649c8d7c4c8e1a6c!8m2!3d37.7749!4d-122.4172",
      totalCost: 125,
      finalCost: 0,
      status: "Unfulfilled",
    },
    {
      id: "ORD002",
      reviews: 8,
      link: "https://www.google.com/maps/place/Acme+Inc/@37.7749,-122.4194,17z/data=!3m1!4b1!4m5!3m4!1s0x80858a6d4e2d30c3:0x649c8d7c4c8e1a6c!8m2!3d37.7749!4d-122.4172",
      totalCost: 200,
      finalCost: 0,
      status: "In Progress",
    },
    {
      id: "ORD003",
      reviews: 12,
      link: "https://www.google.com/maps/place/Acme+Inc/@37.7749,-122.4194,17z/data=!3m1!4b1!4m5!3m4!1s0x80858a6d4e2d30c3:0x649c8d7c4c8e1a6c!8m2!3d37.7749!4d-122.4172",
      totalCost: 300,
      finalCost: 0,
      status: "Submitted to Google",
    },
    {
      id: "ORD004",
      reviews: 3,
      link: "https://www.google.com/maps/place/Acme+Inc/@37.7749,-122.4194,17z/data=!3m1!4b1!4m5!3m4!1s0x80858a6d4e2d30c3:0x649c8d7c4c8e1a6c!8m2!3d37.7749!4d-122.4172",
      totalCost: 75,
      finalCost: 0,
      status: "Partially Fulfilled",
    },
    {
      id: "ORD005",
      reviews: 10,
      link: "https://www.google.com/maps/place/Acme+Inc/@37.7749,-122.4194,17z/data=!3m1!4b1!4m5!3m4!1s0x80858a6d4e2d30c3:0x649c8d7c4c8e1a6c!8m2!3d37.7749!4d-122.4172",
      totalCost: 250,
      finalCost: 250,
      status: "Fulfilled",
    },
  ])
  const [partiallyFulfilledOrder, setPartiallyFulfilledOrder] = useState(null)
  const [partialFulfillmentReviews, setPartialFulfillmentReviews] = useState(0)
  const [isPartialFulfillmentModalOpen, setIsPartialFulfillmentModalOpen] = useState(false)
  const handleStatusChange = (orderId, newStatus) => {
    setOrders((prevOrders) => {
      return prevOrders.map((order) => {
        if (order.id === orderId) {
          if (newStatus === "Fulfilled") {
            return { ...order, status: newStatus, finalCost: order.totalCost }
          } else if (newStatus === "Partially Fulfilled") {
            setPartiallyFulfilledOrder(order)
            setIsPartialFulfillmentModalOpen(true)
            return { ...order, status: newStatus }
          } else {
            return { ...order, status: newStatus, finalCost: 0 }
          }
        }
        return order
      });
    })
  }
  const handlePartialFulfillment = () => {
    if (partiallyFulfilledOrder) {
      const finalCost = partialFulfillmentReviews * 25
      setOrders((prevOrders) => {
        return prevOrders.map((order) => {
          if (order.id === partiallyFulfilledOrder.id) {
            return { ...order, finalCost, status: "Partially Fulfilled" }
          }
          return order
        });
      })
      setPartiallyFulfilledOrder(null)
      setPartialFulfillmentReviews(0)
      setIsPartialFulfillmentModalOpen(false)
    }
  }
  const handleCompleteOrder = (orderId) => {
    setOrders((prevOrders) => {
      return prevOrders.map((order) => {
        if (order.id === orderId && (order.status === "Partially Fulfilled" || order.status === "Fulfilled")) {
          return { ...order, backgroundColor: "bg-green-200", pointerEvents: "none" }
        }
        return order
      });
    })
  }
  return (
    (<div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold mb-6">Order Management Dashboard</h1>
      <div className="overflow-x-auto">
        <table className="w-full table-auto">
          <thead>
            <tr className="bg-gray-200">
              <th className="px-4 py-2">Order ID</th>
              <th className="px-4 py-2">Reviews</th>
              <th className="px-4 py-2">Google Maps Link</th>
              <th className="px-4 py-2">Total Cost</th>
              <th className="px-4 py-2">Final Cost</th>
              <th className="px-4 py-2">Status</th>
              <th className="px-4 py-2">Actions</th>
            </tr>
          </thead>
          <tbody>
            {orders.map((order) => (
              <tr
                key={order.id}
                className={`border-b ${order.backgroundColor || ""}`}
                style={{ pointerEvents: order.pointerEvents || "auto" }}>
                <td className="px-4 py-2">{order.id}</td>
                <td className="px-4 py-2">{order.reviews}</td>
                <td className="px-4 py-2">
                  <a
                    href="#"
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-blue-500 hover:underline">
                    View
                  </a>
                </td>
                <td className="px-4 py-2">{order.totalCost} €</td>
                <td className="px-4 py-2">{order.finalCost} €</td>
                <td className="px-4 py-2">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="outline" className="w-full text-left">
                        {order.status}
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent>
                      <DropdownMenuRadioGroup
                        value={order.status}
                        onValueChange={(newStatus) => handleStatusChange(order.id, newStatus)}>
                        <DropdownMenuRadioItem value="In Progress">In Progress</DropdownMenuRadioItem>
                        <DropdownMenuRadioItem value="Fulfilled">Fulfilled</DropdownMenuRadioItem>
                        <DropdownMenuRadioItem value="Partially Fulfilled">Partially Fulfilled</DropdownMenuRadioItem>
                        <DropdownMenuRadioItem value="Unfulfilled">Unfulfilled</DropdownMenuRadioItem>
                        <DropdownMenuRadioItem value="Submitted to Google">Submitted to Google</DropdownMenuRadioItem>
                      </DropdownMenuRadioGroup>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </td>
                <td className="px-4 py-2 flex justify-end">
                  {(order.status === "Partially Fulfilled" || order.status === "Fulfilled") && (
                    <Button
                      variant="outline"
                      onClick={() => handleCompleteOrder(order.id)}
                      className="mr-2"
                      disabled={order.pointerEvents === "none"}>
                      Complete Order
                    </Button>
                  )}
                  {order.status === "Partially Fulfilled" && (
                    <Dialog open={isPartialFulfillmentModalOpen}>
                      <DialogTrigger asChild>
                        <Button
                          variant="outline"
                          className="mr-2"
                          onClick={() => {
                            setPartiallyFulfilledOrder(order)
                            setIsPartialFulfillmentModalOpen(true)
                          }}
                          disabled={order.pointerEvents === "none"}>
                          Partially Fulfill
                        </Button>
                      </DialogTrigger>
                      <DialogContent className="sm:max-w-[425px]">
                        <div className="flex flex-col items-center justify-center gap-4 py-8">
                          <CircleCheckIcon className="size-12 text-green-500" />
                          <p className="text-lg font-medium">Partially Fulfill Order {partiallyFulfilledOrder?.id}</p>
                          <p>
                            Order ID: {partiallyFulfilledOrder?.id} <br />
                            Total Reviews: {partiallyFulfilledOrder?.reviews}
                          </p>
                          <Input
                            type="number"
                            placeholder="Number of reviews deleted"
                            min={0}
                            max={partiallyFulfilledOrder?.reviews}
                            value={partialFulfillmentReviews}
                            onInput={(e) => setPartialFulfillmentReviews(parseInt(e.currentTarget.value))} />
                          <div className="flex gap-2">
                            <Button
                              type="submit"
                              onClick={() => {
                                handlePartialFulfillment()
                              }}>
                              Save
                            </Button>
                            <div>
                              <Button variant="outline">Cancel</Button>
                            </div>
                          </div>
                        </div>
                      </DialogContent>
                    </Dialog>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>)
  );
}

function CircleCheckIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <circle cx="12" cy="12" r="10" />
      <path d="m9 12 2 2 4-4" />
    </svg>)
  );
}
