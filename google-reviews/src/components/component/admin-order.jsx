/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/wuIjA4l8AUJ
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import Link from "next/link"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuRadioGroup, DropdownMenuRadioItem } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input"

export function AdminOrder() {
  const [orders, setOrders] = useState([
    {
      id: "ORD001",
      numReviews: 10,
      googleMapsLink: "https://goo.gl/maps/example1",
      progress: "In Progress",
      totalCost: 250,
      finalCost: null,
    },
    {
      id: "ORD002",
      numReviews: 15,
      googleMapsLink: "https://goo.gl/maps/example2",
      progress: "Unfulfilled",
      totalCost: 375,
      finalCost: null,
    },
    {
      id: "ORD003",
      numReviews: 20,
      googleMapsLink: "https://goo.gl/maps/example3",
      progress: "Fulfilled",
      totalCost: 500,
      finalCost: 500,
    },
    {
      id: "ORD004",
      numReviews: 18,
      googleMapsLink: "https://goo.gl/maps/example4",
      progress: "Partially Fulfilled",
      totalCost: 450,
      finalCost: null,
    },
    {
      id: "ORD005",
      numReviews: 12,
      googleMapsLink: "https://goo.gl/maps/example5",
      progress: "Submitted to Google",
      totalCost: 300,
      finalCost: null,
    },
  ])
  const [partiallyFulfilledOrder, setPartiallyFulfilledOrder] = useState(null)
  const [numReviewsDeleted, setNumReviewsDeleted] = useState(0)
  const handleProgressChange = (orderId, newProgress) => {
    setOrders((prevOrders) =>
      prevOrders.map((order) =>
        order.id === orderId
          ? {
              ...order,
              progress: newProgress,
              finalCost: newProgress === "Fulfilled" || newProgress === "Partially Fulfilled" ? order.totalCost : 0,
            }
          : order))
    if (newProgress === "Partially Fulfilled") {
      setPartiallyFulfilledOrder(orders.find((order) => order.id === orderId))
    } else {
      setPartiallyFulfilledOrder(null)
      setNumReviewsDeleted(0)
    }
  }
  const handlePartialFulfillment = () => {
    setOrders((prevOrders) =>
      prevOrders.map((order) =>
        order.id === partiallyFulfilledOrder.id
          ? {
              ...order,
              finalCost: numReviewsDeleted * 25,
            }
          : order))
    setPartiallyFulfilledOrder(null)
    setNumReviewsDeleted(0)
  }
  const handleCompleteOrder = (orderId) => {
    setOrders((prevOrders) =>
      prevOrders.map((order) =>
        order.id === orderId
          ? {
              ...order,
              progress: "Completed",
              finalCost: order.totalCost,
            }
          : order))
    toast(`Order ${orderId} has been completed.`, {
      type: "success",
      position: "top-right",
      autoClose: 3000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "light",
    })
  }
  return (
    (<div className="container mx-auto py-8">
      <h1 className="text-2xl font-bold mb-6">Order Management</h1>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Order ID</TableHead>
            <TableHead>Number of Reviews</TableHead>
            <TableHead>Google Maps Link</TableHead>
            <TableHead>Progress</TableHead>
            <TableHead>Total Cost</TableHead>
            <TableHead>Final Cost</TableHead>
            <TableHead>Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {orders.map((order) => (
            <TableRow
              key={order.id}
              className={order.progress === "Completed" ? "bg-green-100 text-green-800" : ""}>
              <TableCell>{order.id}</TableCell>
              <TableCell>{order.numReviews}</TableCell>
              <TableCell>
                <Link href="#" target="_blank" prefetch={false}>
                  {order.googleMapsLink}
                </Link>
              </TableCell>
              <TableCell>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline" className="w-full text-left">
                      {order.progress}
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent>
                    <DropdownMenuRadioGroup
                      value={order.progress}
                      onValueChange={(newProgress) => handleProgressChange(order.id, newProgress)}>
                      <DropdownMenuRadioItem value="In Progress">In Progress</DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="Unfulfilled">Unfulfilled</DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="Fulfilled">Fulfilled</DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="Partially Fulfilled">Partially Fulfilled</DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="Submitted to Google">Submitted to Google</DropdownMenuRadioItem>
                    </DropdownMenuRadioGroup>
                  </DropdownMenuContent>
                </DropdownMenu>
              </TableCell>
              <TableCell>€{order.totalCost}</TableCell>
              <TableCell>{order.finalCost !== null ? `€${order.finalCost}` : "-"}</TableCell>
              <TableCell>
                {order.progress === "Partially Fulfilled" && (
                  <Dialog>
                    <DialogTrigger asChild>
                      <Button variant="outline" size="sm">
                        Partially Fulfill
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="sm:max-w-[425px]">
                      <DialogHeader>
                        <DialogTitle>Partially Fulfill Order</DialogTitle>
                        <DialogDescription>Enter the number of reviews deleted for order {order.id}.</DialogDescription>
                      </DialogHeader>
                      <div>
                        <Input
                          type="number"
                          min="0"
                          max={order.numReviews}
                          defaultValue={0}
                          onInput={(e) => setNumReviewsDeleted(parseInt(e.currentTarget.value))} />
                      </div>
                      <DialogFooter>
                        <div>
                          <Button type="button" onClick={handlePartialFulfillment}>
                            Save
                          </Button>
                        </div>
                      </DialogFooter>
                    </DialogContent>
                  </Dialog>
                )}
                {order.finalCost === order.totalCost && (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => {
                      if (window.confirm(`Are you sure you want to complete order ${order.id}?`)) {
                        handleCompleteOrder(order.id)
                      }
                    }}>
                    Complete Order
                  </Button>
                )}
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
      <div />
    </div>)
  );
}
