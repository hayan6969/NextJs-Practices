/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/6tlezJM69Rh
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'
import { Chivo } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

chivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo } from "react"
import { Input } from "@/components/ui/input"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import Link from "next/link"
import { Badge } from "@/components/ui/badge"

export function UserOrders() {
  const [search, setSearch] = useState("")
  const [sort, setSort] = useState({ key: "id", order: "asc" })
  const orders = useMemo(() =>
    [
      {
        id: 1,
        reviewsRequested: 12,
        googleMapLink: "https://www.google.com/maps/place/123+Main+St,+Anytown+USA",
        status: "In Progress",
      },
      {
        id: 2,
        reviewsRequested: 8,
        googleMapLink: "https://www.google.com/maps/place/456+Oak+Rd,+Somewhere+CA",
        status: "Submitted to Google",
      },
      {
        id: 3,
        reviewsRequested: 20,
        googleMapLink: "https://www.google.com/maps/place/789+Elm+St,+Elsewhere+NY",
        status: "Fulfilled",
      },
      {
        id: 4,
        reviewsRequested: 5,
        googleMapLink: "https://www.google.com/maps/place/321+Pine+Ln,+Nowhere+TX",
        status: "Unfulfilled",
      },
      {
        id: 5,
        reviewsRequested: 15,
        googleMapLink: "https://www.google.com/maps/place/159+Maple+Ave,+Anywhere+FL",
        status: "In Progress",
      },
      {
        id: 6,
        reviewsRequested: 10,
        googleMapLink: "https://www.google.com/maps/place/753+Oak+St,+Someplace+OR",
        status: "Submitted to Google",
      },
      {
        id: 7,
        reviewsRequested: 18,
        googleMapLink: "https://www.google.com/maps/place/951+Elm+Rd,+Everywhere+WA",
        status: "Fulfilled",
      },
      {
        id: 8,
        reviewsRequested: 7,
        googleMapLink: "https://www.google.com/maps/place/357+Pine+Dr,+Nowhere+AZ",
        status: "Unfulfilled",
      },
    ]
      .filter((order) =>
        Object.values(order).some((value) => value.toString().toLowerCase().includes(search.toLowerCase())))
      .sort((a, b) => {
        if (sort.order === "asc") {
          return a[sort.key] > b[sort.key] ? 1 : -1
        } else {
          return a[sort.key] < b[sort.key] ? 1 : -1
        }
      }), [search, sort])
  const deletedReviewCost = 25
  return (
    (<div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold mb-6">Order History</h1>
      <div className="mb-6">
        <Input
          placeholder="Search..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          className="w-full max-w-md" />
      </div>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead
              className="cursor-pointer"
              onClick={() => setSort({ key: "reviewsRequested", order: sort.order === "asc" ? "desc" : "asc" })}>
              Reviews Requested
              {sort.key === "reviewsRequested" && (
                <span className="ml-2">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>
              )}
            </TableHead>
            <TableHead>Google Map Link</TableHead>
            <TableHead
              className="cursor-pointer"
              onClick={() => setSort({ key: "status", order: sort.order === "asc" ? "desc" : "asc" })}>
              Status
              {sort.key === "status" && <span className="ml-2">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>}
            </TableHead>
            <TableHead>Total Cost</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {orders.map((order) => (
            <TableRow key={order.id}>
              <TableCell>{order.reviewsRequested}</TableCell>
              <TableCell>
                <Link
                  href="#"
                  target="_blank"
                  className="text-blue-500 hover:underline"
                  prefetch={false}>
                  View on Google Maps
                </Link>
              </TableCell>
              <TableCell>
                <Badge
                  variant={
                    order.status === "In Progress"
                      ? "bg-orange-500 text-white"
                      : order.status === "Submitted to Google"
                      ? "bg-blue-500 text-white"
                      : order.status === "Fulfilled"
                      ? "bg-green-500 text-white"
                      : "bg-red-500 text-white"
                  }>
                  {order.status}
                </Badge>
              </TableCell>
              <TableCell>${order.reviewsRequested * 25}</TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>)
  );
}
